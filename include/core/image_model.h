#pragma once

#include "image.h"
#include "enums.h"

#include <string>
#include <vector>

#include <iostream>

namespace naivebayes {

using FloatVector4D = std::vector<std::vector<std::vector<std::vector<float>>>>;
using ImageVector2D = std::vector<std::vector<Image>>;

/**
 * Holds a 2D vector of image objects by image set, the dimension of each of
 * those images, a 2D vector detailing the probabilities of shade values
 * across all pixels of all images in all image sets, and a vector of all prior
 * probabilities.
 */
class ImageModel {
 public:
   /**
    * Initializes an ImageModel with nothing. All member variables are set
    * when loading a file into the object.
    */
   ImageModel();

   /**
    * Passes through an image and classifies it based on a helper method
    * which calculates the likelihood of it being a certain image set for
    * every set, making a prediction and returning it in integer form.
    * @param image The image to classify
    * @return The integer form of the set prediction
    */
   int ClassifyImage(const Image& image, bool is_testing);

   /**
    * Calculates the total accuracy of the model based on accuracy values
    * generated by testing the model.
    * @return The total accuracy rate of the model
    */
   float RetrieveTotalAccuracy() const;

   const ImageVector2D &GetImages() const;

   const FloatVector4D &GetProbabilities() const;

   const std::vector<float> &GetPriors() const;

   const std::vector<bool> &GetAccuracies() const;

   size_t GetDimension() const;

   /**
    * Overloads operator>> to populate the variables in a model by loading in
    * a file. This overloads supports loading in a regular text file image 
    * set and loading in a save created by the operator<< overload. Both 
    * options call a helper method to retrieve required values.
    */
   friend std::istream& operator>>(std::istream& is, ImageModel& model);

   /**
    * Overloads operator<< to iterate through the priors and probabilities for
    * creating text file saves.
    */
   friend std::ostream& operator<<(std::ostream& os, ImageModel& model);

 private:
   const float kSmoothingValue = 1.0f;

   /**
    * Loads in a save according to the text file found in the in-stream, 
    * taking in the last line analyzed by the operator>> overload and 
    * iterating through the file.
    * @param is The file as an in-stream
    * @param line The line last analyzed by the operator>> overload
    */
   void LoadInSave(std::istream& is, std::string& line);

   /**
    * Calculates the likelihood that a given image (represented by a 2D
    * Shades vector) is part of a given image set.
    * @param shades The image represented by its pixel shades
    * @param set The image set to check likely membership
    * @return The likelihood rate that the image is part of the set
    */
   float CalculateLikelihood(const ShadeVector2D& shades, const Set& set);

   /**
    * Parses through the file found in the in-stream, starting at a given
    * line, line count, and set. The boolean differentiates between training
    * a model and testing a model.
    * @param is The file as an in-stream
    * @param line The line last analyzed by the operator>> overload
    * @param line_count The starting line count
    * @param set The starting set
    * @param is_training Whether the file is to be used for training or testing
    */
   void ParseThroughFile(std::istream& is, std::string& line, size_t line_count,
                         Set& set, bool is_training);

   /**
    * Adds an image to the 2D images vector, using the lines and set
    * provided by the arguments.
    * @param lines The image as text lines
    * @param set The image set the image belongs to
    */
   void AddImage(const StringVector& lines, const Set& set);

   /**
    * Calculates the priors of each image set and appropriately populates
    * the vector of priors with them.
    */
   void CalculatePriors();

   /**
    * Calculates the probabilities of each shading value for all the pixels in
    * each class set in the 2D image objects vector and appropriately populates
    * the 2D vector of probabilities with them through nested helper methods.
    */
   void CalculateProbabilities();

   /**
    * Calculates the probabilities of a given shading value for all the pixels
    * in a given image set at every position in the 2D image objects vector
    * and appropriately populates the 2D vector of probabilities with them.
    * @param set The image set to analyze
    * @param shade The shade of the pixels to check
    */
   void CalculateForEachPoint(const std::vector<Image>& set, size_t shade);

   /**
    * Calculates the probability of a given shading value for a pixel in a
    * given image set located at a given coordinate point and returns the
    * probability value.
    */
   float BayesTheorem(const std::vector<Image>& set, size_t shade,
                      size_t y_coordinate, size_t x_coordinate) const;

   size_t dimension_;
   ImageVector2D images_;
   std::vector<float> priors_;
   FloatVector4D probabilities_;
   std::vector<bool> accuracies_;
};

}  // namespace naivebayes
